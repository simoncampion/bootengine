#!/bin/bash

set -e

UNIT_DIR="$1"

# crypt_devices() {
#     local _devices='' _d _uuid
#     for _d in $(lsblk -o PATH,FSTYPE,RM \
#                | awk '$2 == "crypto_LUKS" && $3 == "0" { print $1 }' | sort -u);
#     do
#         if ! bindings="$(clevis luks list -d "${_d}" 2>/dev/null)" \
#                          || [ -z "${bindings}" ]; then
#             continue
#         fi
#         _uuid="$(cryptsetup luksUUID "${_d}")"
#         if clevis_is_luks_device_by_uuid_open "${_uuid}"; then
#             continue
#         fi
#         _devices="$(printf '%s\n%s' "${_devices}" "${_d}")"
#     done
#     echo "${_devices}" | sed -e 's/^\n$//'
# }
# 
# is_tang() {
#     # TODO: figure out how to find slot
#     jwe="$(clevis_luks_read_slot "$1" "${SLT}" 2>/dev/null)"
# 
#     echo $jwe | read -r -d . hdr
#     pin="$(jose fmt -q "$hdr" -SyOg clevis -Og pin -Su-)"
#     if [ $pin == "tang" ]; then
#         return 0
#     else
#         return 1
#     fi
# }
 
function exists_tang_encrypted_disk() {
    local _d 
    for _d in $(lsblk -o PATH,FSTYPE,RM \
               | awk '$2 == "crypto_LUKS" && $3 == "0" { print $1 }');
    do
        if bindings="$(clevis-luks-list -d "${_d}" 2>/dev/null)" \
                         && [[ "${bindings}" == *tang* ]]; then
            return 0
        fi
    done

    return 1
}

function add_clevis_network_dependencies() {
    mkdir -p "${UNIT_DIR}/clevis_unlock.service.d"

    cat >${UNIT_DIR}/clevis_unlock.service.d/networkd_dependency.conf <<EOF
    # Automatically generated by tang-network-generator

    [Unit]
    Wants=systemd-networkd.service systemd-resolved.service network-online.target
    After=systemd-networkd.service systemd-resolved.service network-online.target
EOF
}

# DEBUG
ls -R /dev/ > /tmp/lsdev

if exists_tang_encrypted_disk ; then
    add_clevis_network_dependencies
fi